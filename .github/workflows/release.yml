name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name'
        required: true
        default: 'v0.1.0'
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download Linux artifacts
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-linux.yml
        name: reai-r2-linux-binaries
        path: release-artifacts/linux/
        if_no_artifact_found: warn
        
    - name: Download macOS artifacts
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-macos.yml
        name: reai-r2-macos-binaries
        path: release-artifacts/macos/
        if_no_artifact_found: warn
        
    - name: Download Windows artifacts
      uses: dawidd6/action-download-artifact@v3
      with:
        workflow: build-windows.yml
        name: reai-r2-windows-binaries
        path: release-artifacts/windows/
        if_no_artifact_found: warn
        
    - name: Create release packages
      run: |
        cd release-artifacts/
        
        # List what we downloaded
        echo "Downloaded artifacts:"
        find . -type f | sort
        
        # Create platform-specific packages
        if [ -d "linux" ]; then
          echo "Creating Linux package..."
          tar -czf "reai-r2-linux.tar.gz" -C linux .
          echo "✅ Created reai-r2-linux.tar.gz"
        fi
        
        if [ -d "macos" ]; then
          echo "Creating macOS package..."
          tar -czf "reai-r2-macos.tar.gz" -C macos .
          echo "✅ Created reai-r2-macos.tar.gz"
        fi
        
        if [ -d "windows" ]; then
          echo "Creating Windows package..."
          cd windows && zip -r "../reai-r2-windows.zip" . && cd ..
          echo "✅ Created reai-r2-windows.zip"
        fi
        
        # List final packages
        echo "Created release packages:"
        ls -la *.tar.gz *.zip 2>/dev/null || echo "No packages were created"
        
    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          echo "prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "prerelease=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_name.outputs.tag_name }}
        name: RevEngAI Radare2 Plugin ${{ steps.tag_name.outputs.tag_name }}
        draft: false
        prerelease: ${{ steps.tag_name.outputs.prerelease }}
        generate_release_notes: true
        files: |
          release-artifacts/*.tar.gz
          release-artifacts/*.zip
        body: |
          ## RevEngAI Radare2 Plugin Release ${{ steps.tag_name.outputs.tag_name }}
          
          This release contains the RevEngAI plugin for Radare2 with automated install scripts.
          
          ### Downloads
          
          | Platform | Download | Contents |
          |----------|----------|----------|
          | Linux | `reai-r2-linux.tar.gz` | Radare2 plugin + install script |
          | macOS | `reai-r2-macos.tar.gz` | Radare2 plugin + install script |
          | Windows | `reai-r2-windows.zip` | Radare2 plugin + install script |
          
          ### Installation (Recommended)
          
          Use the included install scripts for automatic installation:
          
          #### Linux
          ```bash
          wget https://github.com/RevEngAI/reai-r2/releases/download/${{ steps.tag_name.outputs.tag_name }}/reai-r2-linux.tar.gz
          tar -xzf reai-r2-linux.tar.gz
          cd reai-r2-linux
          
          # Install dependencies (Ubuntu/Debian)
          sudo apt install patchelf radare2
          
          # Run installer
          chmod +x install-linux.sh
          ./install-linux.sh
          ```
          
          #### macOS  
          ```bash
          curl -L -O https://github.com/RevEngAI/reai-r2/releases/download/${{ steps.tag_name.outputs.tag_name }}/reai-r2-macos.tar.gz
          tar -xzf reai-r2-macos.tar.gz
          cd reai-r2-macos
          
          # Install dependencies
          brew install radare2
          xcode-select --install
          
          # Run installer
          chmod +x install-macos.sh
          ./install-macos.sh
          ```
          
          #### Windows
          ```powershell
          # Download and extract
          Invoke-WebRequest "https://github.com/RevEngAI/reai-r2/releases/download/${{ steps.tag_name.outputs.tag_name }}/reai-r2-windows.zip" -OutFile "reai-r2-windows.zip"
          Expand-Archive "reai-r2-windows.zip" -Force
          cd reai-r2-windows
          
          # Run installer with execution policy bypass
          Set-ExecutionPolicy Bypass -Scope Process -Force; .\install-windows.ps1
          ```
          
          ### What The Install Scripts Do
          
          - Install libraries to user directories (`~/.local/lib/`)
          - Install Radare2 plugin to `$(radare2 -H R2_USER_PLUGINS)`
          - Fix library paths so plugins can find dependencies
          - Set up environment variables
          - Verify installation and provide status messages
          
          ### Manual Installation
          
          If the automated scripts don't work:
          
          **File Locations:**
          - Linux: `~/.local/lib/libreai.so` + plugin to `$(radare2 -H R2_USER_PLUGINS)`
          - macOS: `~/.local/lib/libreai.dylib` + plugin to `$(radare2 -H R2_USER_PLUGINS)`
          - Windows: `%USERPROFILE%\.local\bin\reai.dll` + plugin to `$(radare2 -H R2_USER_PLUGINS)`
          
          **Environment Variables (Unix):**
          ```bash
          export LD_LIBRARY_PATH="$HOME/.local/lib:$LD_LIBRARY_PATH"  # Linux
          export DYLD_LIBRARY_PATH="$HOME/.local/lib:$DYLD_LIBRARY_PATH"  # macOS
          ```
          
          ### Configuration
          
          Create `~/.creait`:
          ```
          api_key = YOUR_REVENGAI_API_KEY
          host = https://api.reveng.ai
          ```
          
          ### Verification
          
          ```bash
          radare2 -AA /bin/ls
          [0x00000000]> RE?
          # Should display RevEngAI plugin help
          ```
          
          ### Requirements
          
          **Runtime Requirements:**
          - Radare2 5.9.8 or compatible
          - Valid RevEngAI API key from https://portal.reveng.ai
          
          **Platform-specific Installation Tools:**
          - Linux: `patchelf` tool for rpath fixing (`sudo apt install patchelf`)
          - macOS: Xcode command line tools for rpath fixing (`xcode-select --install`) 
          - Windows: PowerShell with script execution enabled
          
          **Build Requirements (if building from source):**
          - CMake 3.25 or higher
          - C/C++ compiler (GCC/Clang on Unix, MSVC on Windows)
          - Python 3 with PyYAML (`pip install pyyaml`)
          - pkg-config
          - libcurl development headers
          - Git (for version information)
          
          ### Support
          
          - Bug reports: https://github.com/RevEngAI/reai-r2/issues
          - Discord: [![Discord](https://img.shields.io/badge/Discord-Join%20Us-7289da?logo=discord&logoColor=white)](https://discord.com/invite/ZwQTvzfSbA)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 