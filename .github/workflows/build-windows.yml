name: Build Windows

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Setup Visual Studio Developer Environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        
    - name: Build project with Python venv
      run: |
        # Create and activate virtual environment
        python -m venv .venv
        .\.venv\Scripts\Activate.ps1
        
        # Install Python dependencies
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        
        # Verify PyYAML is available
        python -c "import yaml; print('PyYAML is available in venv')"
        
        # Run the build script
        Set-ExecutionPolicy Bypass -Scope Process -Force
        .\Scripts\Build.ps1
      shell: powershell
      
    - name: Collect runtime binaries
      run: |
        New-Item -ItemType Directory -Force -Path "artifacts"
        
        $InstallPath = "$env:USERPROFILE\.local\RevEngAI\Radare2\Install"
        
        Write-Host "=== Contents of Install Directory ==="
        if (Test-Path $InstallPath) {
          Get-ChildItem -Recurse $InstallPath | Select-Object -First 30 | ForEach-Object { Write-Host $_.FullName }
          
          Write-Host "`n=== Collecting Runtime DLLs ==="
          # Collect ALL DLL files (runtime libraries)
          Get-ChildItem -Recurse $InstallPath -Filter "*.dll" | ForEach-Object {
            Copy-Item $_.FullName "artifacts\"
            Write-Host "Copied DLL: $($_.Name)"
          }
        } else {
          Write-Host "Install path not found: $InstallPath"
        }
        
        # Also search in build directories for any missed DLLs
        Write-Host "`n=== Searching build directories ==="
        Get-ChildItem -Recurse . -Filter "*.dll" -ErrorAction SilentlyContinue | ForEach-Object {
          Copy-Item $_.FullName "artifacts\" -ErrorAction SilentlyContinue
          Write-Host "Found in build: $($_.Name)"
        }
        
        Write-Host "`n=== Final Runtime Binaries ==="
        Get-ChildItem "artifacts" | ForEach-Object { Write-Host $_.Name }
      shell: powershell
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: reai-r2-windows-binaries
        path: artifacts/
        if-no-files-found: warn 